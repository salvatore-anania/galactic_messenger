/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'

    // Apply the Java 20 plugin  to add support for Java.
    id 'java' 
    id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'

}
description 'Serveur Rest utilisant le framework Spring Boot'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

java {
    sourceCompatibility = JavaVersion.VERSION_20
    targetCompatibility = JavaVersion.VERSION_20
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'javax.persistence:persistence-api:1.0.2'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation"org.springframework.boot:spring-boot-starter-websocket"
   developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

application {
    // Define the main class for the application.
    mainClass = 'galactic_messenger.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

